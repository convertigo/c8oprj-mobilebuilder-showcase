preloadPriority: high
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        /*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	oToString(o) {
        	    return (typeof o === "object")?JSON.stringify(o):o;
        	}
        	
        	page_c8o_log(level, msg, data) {
        	    this.c8o.log[level](msg + this.oToString(data));
        	}
        	/*End_c8o_PageFunction*/
        
segment: path-to-page_zhowtos_fingerprint
title: Fingerprint
↓Header [mobile.components.UIDynamicElement-1579603141859]: 
  beanData: '{"ionBean":"Header"}'
  comment: Page header
  tagName: ion-header
  ↓NavBar [mobile.components.UIDynamicElement-1579603141862]: 
    beanData: '{"ionBean":"NavBar"}'
    tagName: ion-navbar
    ↓BarTitle [mobile.components.UIDynamicElement-1579603141865]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Text [mobile.components.UIText-1579603141868]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:Fingerprint
    ↓Button [mobile.components.UIDynamicElement-1579603141871]: 
      beanData: |
        '{
         "ionBean": "Button",
         "ButtonFormType": "plain:false",
         "MenuMode": "plain:menuToggle"
        }'
      comment: A button to toggle the menu
      tagName: button
      ↓Icon [mobile.components.UIDynamicElement-1579603141874]: 
        beanData: '{"ionBean":"Icon","IconName":"plain:menu"}'
        tagName: ion-icon
    ↓ButtonSet [mobile.components.UIDynamicElement-1588062857920]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
      tagName: ion-buttons
      ↓Button [mobile.components.UIDynamicElement-1588062857923]: 
        beanData: |
          '{
           "ionBean": "Button",
           "ButtonFormType": "plain:false",
           "IonColor": "plain:primary",
           "IconOnly": "plain:icon-only"
          }'
        tagName: button
        ↓Icon [mobile.components.UIDynamicElement-1588062857926]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:help-circle"}'
          tagName: ion-icon
        ↓Event [mobile.components.UIControlEvent-1588062857929]: 
          ↓wrapper [mobile.components.UICustomAction-1588063486067]: 
            ↓Popover [mobile.components.UIDynamicAction-1588063486070]: 
              beanData: |
                '{
                 "ionBean": "PopoverAction",
                 "page": "plain:MobileBuilderComponents.MobileApplication.Application.Page_Docs_documentation",
                 "data": "script:{\"components\":[{\"title\":\"CustomAction\",\"shortDesc\":\"Defines CustomAction action component.\",\"longDesc\":[\"You can call from CustomAction code any additional package available on NPM. To do so, simply configure the Application packages property with a NPM Package and version number, and configure the Page Imports property to declare all the packages import you will need. This will automatically insert TypeScript ''Import'' statements in the page where the CustomAction is used. If you want to use use one the imported classes, you may have to get an Instance of it. To do so, you can use the CAF utility method this.getInstance(Class).\",\"Some NPM packages may require also additional module declarations. To do so, configure the Application modules property, the Application providers property and the Application imports property. This will insert automatically the module to the app.module.ts file in the @NgModule ''imports'' or ''provider'' arrays, and add an ''Import'' TypeScript statement in the file header.\",\"Some other NPM packages may also require an Additional Cordova plugin. (For example ionic Native packages). You can also declare these plugins in the Application plugins property. This will cause Convertigo Studio to automatically add the plugin to the project''s Cordova Config.xml file.\"]}]}"
                }'
          ↓InvokeSharedAction [mobile.components.UIDynamicInvoke-1588062857938]: 
            beanData: '{"ionBean":"InvokeAction"}'
            stack: MobileBuilderComponents.MobileApplication.Application.highlightObject
            ↓qname [mobile.components.UIControlVariable-1588062857944]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'Page_zHowTos_Fingerprint.PageEvent.init_Fingerprint'
            ↓clabel [mobile.components.UIControlVariable-1588063148507]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'CustomAction'
↓Content [mobile.components.UIDynamicElement-1579603141877]: 
  beanData: '{"ionBean":"Content"}'
  comment: Page content
  tagName: ion-content
  ↓Grid [mobile.components.UIDynamicElement-1585776994722]: 
    beanData: '{"ionBean":"Grid"}'
    tagName: ion-grid
    ↓GridRow [mobile.components.UIDynamicElement-1585776994725]: 
      beanData: '{"ionBean":"GridRow","Height":"plain:height: 100%"}'
      tagName: ion-row
      ↓GridCol [mobile.components.UIDynamicElement-1585776994728]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Attr [mobile.components.UIAttribute-1585776994731]: 
          attrName: 
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:text-justify
        ↓Fragment [mobile.components.UICustom-1585776994734]: 
          htmlTemplate: |
            <div>
            	<p>At page loading, it should propose you to authenticate using your finger print, if your device supports it.</p>
            	<p>You can click the "<b>AUTHENTICATE</b>" button to restart the demo.
            </div>
  ↓Directive [mobile.components.UIControlDirective-1585750786150]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!window.cordova
    ↓Div [mobile.components.UIDynamicElement-1585750725023]: 
      beanData: '{"ionBean":"DivTag"}'
      tagName: div
      ↓Text2 [mobile.components.UIText-1585750068485]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:Only works on device
  ↓Text [mobile.components.UIText-1579605555110]: 
    textValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:Fingerprint demo:
  ↓Text1 [mobile.components.UIText-1579605577190]: 
    textValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
        - MobileSmartSourceType: source:{"filter":"Global","project":"MobileBuilderComponents","input":"router.sharedObject?.fpt"}
↓Footer [mobile.components.UIDynamicElement-1579603141880]: 
  beanData: '{"ionBean":"Footer"}'
  comment: Page footer
  tagName: ion-footer
  ↓ToolBar [mobile.components.UIDynamicElement-1579603141883]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSet [mobile.components.UIDynamicElement-1579603141886]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:right"}'
      tagName: ion-buttons
      ↓Button [mobile.components.UIDynamicElement-1579609434406]: 
        beanData: '{"ionBean":"Button","ButtonFormType":"plain:false"}'
        tagName: button
        ↓Text [mobile.components.UIText-1579609434409]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.mobile.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Authenticate
        ↓Event [mobile.components.UIControlEvent-1579609434414]: 
          ↓RootPage [mobile.components.UIDynamicAction-1579609434418]: 
            beanData: |
              '{
               "ionBean": "RootPageAction",
               "page": "plain:MobileBuilderComponents.MobileApplication.Application.Page_zHowTos_Fingerprint",
               "animate": "plain:false"
              }'
↓PageEvent [mobile.components.UIPageEvent-1579603196158]: 
  ↓init_Fingerprint [mobile.components.UICustomAction-1579603231191]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
            		page["fingerprint"] = page.getInstance(FingerprintAIO);
            		page["fingerprint"].isAvailable()
            		.then((result: any) => {
            //		      page.c8o.log.debug(''is Fingerprint available? ''+ result);
            		      this.page_c8o_log(''debug'', ''is Fingerprint available? '', result);
            		      let fingerprintOptions = {
            		              title: ''TITLE'',
            		              subtitle: ''SUBTITLE'',
            		              description: ''DESCRIPTION'',
            		              clientId: ''C8O-fpt-demo'',
            		              clientSecret: ''password'',
            		              disableBackup: true
            		      };
            		      page["fingerprint"].show(fingerprintOptions)
            		      .then((result: any) => {
            //		          page.c8o.log.debug(''RESULT: '' + result);
            		          this.page_c8o_log(''debug'', ''RESULT: '', result)
            		          resolve(this.oToString(result));
            		      })
            		      .catch((error: any) => {
            //		          page.c8o.log.debug(''ERROR: '' + error);
            		          this.page_c8o_log(''debug'', ''ERROR: '', error);
            		          resolve(this.oToString(error));
            		      });
            		})
            		.catch((error: any) => {
            //		    page.c8o.log.debug(''Fingerprint available error: ''+ error);
            		    this.page_c8o_log(''debug'', ''Fingerprint available error: '', error);
            		    resolve(this.oToString(error));
            		});
            //		resolve();
            '
    cordova_plugins: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: cordova-plugin-fingerprint-aio
              - java.lang.String: 
                - ↑value: 3.0.1
              - java.lang.String: 
                - ↑value: '{}'
    module_ng_providers: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: FingerprintAIO
    module_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: FingerprintAIO, FingerprintOptions
              - java.lang.String: 
                - ↑value: '@ionic-native/fingerprint-aio'
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@ionic-native/fingerprint-aio'
              - java.lang.String: 
                - ↑value: 4
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: FingerprintAIO, FingerprintOptions
              - java.lang.String: 
                - ↑value: '@ionic-native/fingerprint-aio'
    ↓SetGlobal [mobile.components.UIDynamicAction-1579605531165]: 
      beanData: |
        '{
         "ionBean": "SetGlobalAction",
         "Property": "plain:fpt",
         "Value": "script:out"
        }'